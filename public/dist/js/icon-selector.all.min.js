(function() {
  angular.module('iconSelector', ['ngMaterial']);

}).call(this);

(function() {
  var clearValues, decyclicSearch, derez, objects, searchResult, searchValue,
    hasProp = {}.hasOwnProperty;

  objects = searchValue = searchResult = null;

  derez = function(value, path) {
    var i, index, j, len, name, nu, propName, propVal, val;
    i = name = nu = null;
    if (searchResult != null) {
      return;
    }
    if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String)) {
      if (objects.indexOf(value) !== -1) {
        return;
      }
      objects.push(value);
      if (Object.prototype.toString.apply(value) === '[object Array]') {
        for (index = j = 0, len = value.length; j < len; index = ++j) {
          val = value[index];
          if (searchResult != null) {
            return;
          }
          derez(val, path + "[" + index + "]");
        }
      } else {
        for (propName in value) {
          if (!hasProp.call(value, propName)) continue;
          propVal = value[propName];
          if (searchResult != null) {
            return;
          }
          derez(propVal, path + "[" + (JSON.stringify(propName)) + "]");
        }
      }
    } else if (value === searchValue) {
      searchResult = {
        v: value,
        p: path
      };
    }
  };

  clearValues = function() {
    return objects = searchValue = searchResult = null;
  };

  decyclicSearch = function(object, searchVal) {

    /*
    	 Finds a value in an object that may contain circular references.
    	 Stores objects encountered and the path as it iterates
     */
    var result;
    objects = [];
    searchValue = searchVal;
    derez(object, '$');
    result = searchResult;
    clearValues();
    return result;
  };

  angular.module('iconSelector').service('decyclicSearch', function() {
    return {
      search: decyclicSearch
    };
  });

}).call(this);

(function() {
  var IconSelectorController;

  IconSelectorController = function($mdDialog, cseRenderer, $timeout, $scope, decyclicSearch) {
    var baseObj, cleanupImage, currentX, currentY, dimensionValidationSet, domObserver, findFullUrl, firstRef, getFromPath, getImageElement, getImageForPositioning, imageDimension, imageX, imageY, img, imgDomPath, initializePositionScreen, lastObjPath, letGoOfElement, moveElement, numberProp, onUpdateDimensionField, onUpdatePxField, positionValidationSet, scrollElement, searchObj, self, watchImages, zoomSpeed;
    self = this;
    this.screens = {
      search: 'search',
      load: 'load',
      position: 'position'
    };
    this.imageProperties = {
      'background-size': 'contain',
      'background-position': '50% 50%',
      'background-repeat': 'no-repeat',
      'border-radius': 'initial',
      position: 'relative',
      height: '128px',
      width: '128px',
      top: '0px',
      left: '0px'
    };
    this.currentScreen = this.screens.search;
    $timeout(function() {
      cseRenderer.render('icon-select-search', self.preSearchValue);
      watchImages();
    }, 0);
    firstRef = null;
    imgDomPath = '#icon-select-search .gs-image-thumbnail-box img';
    domObserver = new MutationObserver(function() {
      var curRef;
      $('.gs-result').removeAttr('onmouseover');
      curRef = $(imgDomPath).first().attr('src');
      if (firstRef !== curRef) {
        firstRef = curRef;
        $(imgDomPath).click(function(event) {
          var result, src;
          event.preventDefault();
          src = $(event.target).attr('src');
          result = findFullUrl(src);
          $scope.$apply(function() {
            self.currentScreen = self.screens.load;
          });
          getImageForPositioning(result, src);
        });
      }
    });
    watchImages = function() {
      domObserver.observe($('#icon-select-search')[0], {
        childList: true,
        subtree: true
      });
    };
    img = null;
    cleanupImage = function() {
      if (img != null) {
        img.remove();
        img = null;
      }
    };
    getImageForPositioning = function(url, backupUrl) {
      cleanupImage();
      img = $('<img>', {
        src: url,
        error: function() {
          if (backupUrl != null) {
            getImageForPositioning(backupUrl);
          } else {
            $scope.$apply(function() {
              console.error('something fucked up');
              self.currentScreen = self.screens.search;
            });
          }
        },
        load: function() {
          initializePositionScreen(url);
        }
      });
    };
    $scope.$watch(function() {
      return self.scrollDimension;
    }, function(newVal) {
      if (newVal !== imageDimension.getVal()) {
        imageDimension.modify(imageDimension.getVal() - newVal);
      }
    });
    numberProp = function(initialValue, onChangeHandler, validationSetHandler) {
      var accessors, p;
      p = initialValue;
      accessors = {
        modify: function(amount) {
          if (accessors.validationSet != null) {
            p = accessors.validationSet(p, amount);
          } else {
            p += amount;
          }
          if (accessors.onChange != null) {
            accessors.onChange(p, amount);
          }
        },
        getVal: function() {
          return angular.copy(p);
        },
        validationSet: validationSetHandler,
        onChange: onChangeHandler
      };
      if (onChangeHandler != null) {
        onChangeHandler(p, null);
      }
      return accessors;
    };
    onUpdatePxField = function(propName) {
      return function(newVal) {
        self.imageProperties[propName] = newVal + 'px';
      };
    };
    onUpdateDimensionField = function() {
      var updateHeight, updateWidth;
      updateHeight = onUpdatePxField('height');
      updateWidth = onUpdatePxField('width');
      return function(newVal, amount) {
        updateHeight(newVal);
        updateWidth(newVal);
        if (amount != null) {
          imageX.modify(amount / 2);
          imageY.modify(amount / 2);
          return self.scrollDimension = newVal;
        }
      };
    };
    dimensionValidationSet = function(val, amount) {
      val -= amount;
      val = Math.max(val, self.minDimension);
      val = Math.min(val, self.maxDimension);
      return val;
    };
    positionValidationSet = function(val, amount) {
      val += amount;
      val = Math.max(val, 128 - imageDimension.getVal());
      val = Math.min(val, 0);
      return val;
    };
    currentX = currentY = null;
    zoomSpeed = 2;
    initializePositionScreen = function(url) {
      self.imageProperties['background-image'] = "url(" + url + ")";
      cleanupImage();
      getImageElement().on('pointerdown', function(event) {
        currentX = event.pageX;
        currentY = event.pageY;
        getImageElement().on('pointermove', moveElement);
        getImageElement().on('pointerup', letGoOfElement);
      });
      getImageElement().mousewheel(scrollElement);
      $scope.$apply(function() {
        self.currentScreen = self.screens.position;
      });
    };
    moveElement = function(event) {
      var moveX, moveY;
      moveX = event.pageX - currentX;
      moveY = event.pageY - currentY;
      currentX = event.pageX;
      currentY = event.pageY;
      $scope.$apply(function() {
        imageX.modify(moveX);
        imageY.modify(moveY);
      });
    };
    letGoOfElement = function() {
      getImageElement().off('pointermove');
      getImageElement().off('pointerup');
    };
    scrollElement = function(event) {
      var dimensionChange;
      dimensionChange = event.deltaY * zoomSpeed;
      $scope.$apply(function() {
        imageDimension.modify(dimensionChange);
      });
    };
    getImageElement = function() {
      return $('#icon-select-draggable');
    };
    searchObj = lastObjPath = null;
    baseObj = google.search;
    findFullUrl = function(src) {
      var resultObj;
      searchObj = baseObj;
      if (lastObjPath != null) {
        searchObj = getFromPath(lastObjPath, baseObj, 3);
        if (!searchObj) {
          console.error('no object found from last path');
          lastObjPath = null;
          searchObj = baseObj;
        }
      }
      resultObj = decyclicSearch.search(searchObj, src);
      if (resultObj != null) {
        if (!lastObjPath) {
          lastObjPath = resultObj.p;
        } else {
          console.log('last obj path worked!! :D');
        }
        resultObj = getFromPath(resultObj.p, searchObj, 1);
        return resultObj['url'];
      } else if (lastObjPath != null) {
        lastObjPath = null;
        console.log('lastObjPath didnt work, defaulting to full search');
        return findFullUrl(src);
      } else {
        console.error('tried to find, did not work :(');
        return '';
      }
    };
    imageX = numberProp(-32, onUpdatePxField('left'), positionValidationSet);
    imageY = numberProp(-35, onUpdatePxField('top'), positionValidationSet);
    imageDimension = numberProp(198, onUpdateDimensionField(), dimensionValidationSet);
    this.minDimension = 128;
    this.maxDimension = 600;
    this.scrollDimension = imageDimension.getVal();
    getFromPath = function(path, obj, backCount) {
      var i, j, ref;
      if (backCount == null) {
        backCount = 0;
      }
      path = path.trim('$').replace(/(\$\[|\])/g, '').split('[');
      for (i = j = 0, ref = path.length - backCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        obj = obj[JSON.parse(path[i])];
      }
      return obj;
    };
    this.accept = function() {
      self.currentScreen = self.screens.load;
      self.imageUploader(self.showId, self.imageProperties).success(function(data) {
        self.close(data);
      }).error(function(err) {
        console.error(err);
        self.currentScreen = self.screens.search;
      });
    };
    this.back = function() {
      self.currentScreen = self.screens.search;
    };
    this.close = function(imageProperties) {
      var returnObj;
      domObserver.disconnect();
      getImageElement().unbind();
      self.imageProperties = {};
      returnObj = {
        hasNewImage: imageProperties != null,
        newImageProperties: imageProperties
      };
      $mdDialog.hide(returnObj);
    };
  };

  angular.module('iconSelector').controller('iconSelectorController', ['$mdDialog', 'cseRenderer', '$timeout', '$scope', 'decyclicSearch', IconSelectorController]);

}).call(this);

(function() {
  var IconSelectorService;

  IconSelectorService = function($mdDialog, $rootScope) {
    var getShowSelector;
    return {
      getShowSelector: getShowSelector = function(handleResult, getPreSearchValue, getShowId, imageUploader) {
        return function() {
          $mdDialog.show({
            clickOutsideToClose: false,
            escapeToClose: false,
            templateUrl: '/html/icon-selector-dialog.html',
            controller: 'iconSelectorController',
            controllerAs: 'icon',
            locals: {
              preSearchValue: getPreSearchValue(),
              showId: getShowId(),
              imageUploader: imageUploader
            },
            bindToController: true
          }).then(function(data) {
            if ($rootScope.$$phase != null) {
              handleResult(data);
            } else {
              $rootScope.$apply(function() {
                handleResult(data);
              });
            }
          });
        };
      }
    };
  };

  angular.module('iconSelector').service('iconSelectorService', ['$mdDialog', '$rootScope', IconSelectorService]);

}).call(this);

(function() {
  var CseRenderer;

  CseRenderer = function($location) {
    var cx, service;
    cx = '002346021416897782818:ziotcz2o5qa';
    service = {
      initialised: false,
      initialise: function(callback) {
        window.__gcse = {
          parsetags: 'explicit',
          callback: callback || function() {
            service.initialised = true;
          }
        };
        $.getScript(($location.protocol()) + "://cse.google.com/cse.js?cx=" + cx);
      },
      render: function(searchId, searchString) {
        var cse, searchConfig;
        if (!service.initialised) {
          service.initialise(function() {
            service.initialised = true;
            return render(searchId, searchString);
          });
        } else {
          searchConfig = {
            div: searchId,
            tag: 'search',
            attributes: {
              enableImageSearch: true,
              disableWebSearch: true,
              imageSearchLayout: 'popup'
            }
          };
          cse = google.search.cse.element.render(searchConfig);
          if (searchString) {
            cse.execute(searchString);
          }
        }
      }
    };
    return service;
  };

  angular.module('iconSelector').service('cseRenderer', ['$location', CseRenderer]);

}).call(this);

//# sourceMappingURL=../../maps/icon-selector.all.min.js.map